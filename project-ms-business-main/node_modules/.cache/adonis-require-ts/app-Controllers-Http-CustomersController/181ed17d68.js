"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Customer_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Customer"));
const axios_1 = __importDefault(require("axios"));
const Env_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Env"));
const CustomerValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/CustomerValidator"));
class CustomersController {
    async find({ request, params }) {
        const { page, per_page } = request.only(["page", "per_page"]);
        const customers = [];
        const metaAux = [];
        if (params.id) {
            const theCustomer = await Customer_1.default.findOrFail(params.id);
            customers.push(theCustomer);
        }
        else if (page && per_page) {
            const { meta, data } = await Customer_1.default.query()
                .paginate(page, per_page)
                .then((res) => res.toJSON());
            metaAux.push(meta);
            customers.push(...data);
        }
        else {
            const allCustomers = await Customer_1.default.all();
            customers.push(...allCustomers.map((c) => c.toJSON()));
        }
        await Promise.all(customers.map(async (customer, index) => {
            const res = await axios_1.default.get(`${Env_1.default.get("MS_SECURITY")}/api/users/email/${customer.email}`, {
                headers: {
                    Authorization: `Bearer ${Env_1.default.get("MS_SECURITY_KEY")}`,
                },
            });
            const { _id, name, email } = res.data;
            const { id, document, phone, gender } = customer;
            customers[index] = {
                id,
                user_id: _id,
                name,
                email,
                document,
                phone,
                gender,
            };
        }));
        if (metaAux.length > 0) {
            return { meta: metaAux, data: customers };
        }
        return customers;
    }
    async getChatByServiceExecution({ params }) {
        return Customer_1.default.findOrFail(params.id).then((customer) => customer
            .related("serviceExecutions")
            .query()
            .where("id", params.service_execution_id)
            .first()
            .then((serviceExecution) => serviceExecution?.related("chat")));
    }
    async create({ request }) {
        const body = await request.validate(CustomerValidator_1.default);
        const theCustomer = await Customer_1.default.create(body);
        return theCustomer;
    }
    async update({ params, request }) {
        const theCustomer = await Customer_1.default.findOrFail(params.id);
        const data = request.body();
        theCustomer.merge(data);
        return await theCustomer.save();
    }
    async delete({ params, response }) {
        const theCustomer = await Customer_1.default.findOrFail(params.id);
        response.status(204);
        return await theCustomer.delete();
    }
    async getSubscriptionByCustomer({ params }) {
        const theCustomer = await Customer_1.default.findOrFail(params.id);
        await theCustomer.load("subscriptions");
        return Promise.all(theCustomer.subscriptions.map(async (s) => {
            await s.load("customer");
            return {
                id: s.id,
                customer: s.customer_id,
                start_date: s.startDate,
                end_date: s.endDate,
                monthly_fee: s.monthlyFee,
                is_paid: s.isPaid,
            };
        }));
    }
}
exports.default = CustomersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VzdG9tZXJzQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkN1c3RvbWVyc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSx5RkFBMkM7QUFFM0Msa0RBQTBCO0FBRTFCLGdGQUF1QztBQUV2QywrR0FBaUU7QUFFakUsTUFBcUIsbUJBQW1CO0lBQy9CLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUF1QjtRQUN4RCxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUM5RCxNQUFNLFNBQVMsR0FBa0IsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sT0FBTyxHQUFrQixFQUFFLENBQUM7UUFFbEMsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQ2IsTUFBTSxXQUFXLEdBQWEsTUFBTSxrQkFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUM3QjthQUFNLElBQUksSUFBSSxJQUFJLFFBQVEsRUFBRTtZQUMzQixNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxLQUFLLEVBQUU7aUJBQzFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2lCQUN4QixJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBRS9CLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkIsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQ3pCO2FBQU07WUFDTCxNQUFNLFlBQVksR0FBRyxNQUFNLGtCQUFRLENBQUMsR0FB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Q0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckIsT0FBTyxNQUFNLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBR00sS0FBSyxDQUFDLHlCQUF5QixDQUFDLEVBQUUsTUFBTSxFQUF1QjtRQUNwRSxNQUFNLFdBQVcsR0FBRyxNQUFNLGtCQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6RCxNQUFNLFdBQVcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFeEMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUNoQixXQUFXLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3pCLE9BQU87Z0JBQ0wsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFO2dCQUNSLFFBQVEsRUFBRSxDQUFDLENBQUMsV0FBVztnQkFDdkIsVUFBVSxFQUFFLENBQUMsQ0FBQyxTQUFTO2dCQUN2QixRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU87Z0JBQ25CLFdBQVcsRUFBRSxDQUFDLENBQUMsVUFBVTtnQkFDekIsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNO2FBQ2xCLENBQUM7UUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBckdELHNDQXFHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gXCJAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0XCI7XG5pbXBvcnQgQ3VzdG9tZXIgZnJvbSBcIkFwcC9Nb2RlbHMvQ3VzdG9tZXJcIjtcblxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5pbXBvcnQgRW52IGZyb20gXCJAaW9jOkFkb25pcy9Db3JlL0VudlwiO1xuaW1wb3J0IHsgTW9kZWxPYmplY3QgfSBmcm9tIFwiQGlvYzpBZG9uaXMvTHVjaWQvT3JtXCI7XG5pbXBvcnQgQ3VzdG9tZXJWYWxpZGF0b3IgZnJvbSBcIkFwcC9WYWxpZGF0b3JzL0N1c3RvbWVyVmFsaWRhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1c3RvbWVyc0NvbnRyb2xsZXIge1xuICBwdWJsaWMgYXN5bmMgZmluZCh7IHJlcXVlc3QsIHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgeyBwYWdlLCBwZXJfcGFnZSB9ID0gcmVxdWVzdC5vbmx5KFtcInBhZ2VcIiwgXCJwZXJfcGFnZVwiXSk7XG4gICAgY29uc3QgY3VzdG9tZXJzOiBNb2RlbE9iamVjdFtdID0gW107XG4gICAgY29uc3QgbWV0YUF1eDogTW9kZWxPYmplY3RbXSA9IFtdO1xuXG4gICAgaWYgKHBhcmFtcy5pZCkge1xuICAgICAgY29uc3QgdGhlQ3VzdG9tZXI6IEN1c3RvbWVyID0gYXdhaXQgQ3VzdG9tZXIuZmluZE9yRmFpbChwYXJhbXMuaWQpO1xuICAgICAgY3VzdG9tZXJzLnB1c2godGhlQ3VzdG9tZXIpO1xuICAgIH0gZWxzZSBpZiAocGFnZSAmJiBwZXJfcGFnZSkge1xuICAgICAgY29uc3QgeyBtZXRhLCBkYXRhIH0gPSBhd2FpdCBDdXN0b21lci5xdWVyeSgpXG4gICAgICAgIC5wYWdpbmF0ZShwYWdlLCBwZXJfcGFnZSlcbiAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLnRvSlNPTigpKTtcblxuICAgICAgbWV0YUF1eC5wdXNoKG1ldGEpO1xuICAgICAgY3VzdG9tZXJzLnB1c2goLi4uZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGFsbEN1c3RvbWVycyA9IGF3YWl0IEN1c3RvbWVyLmFsbCgpO1xuICAgICAgY3VzdG9tZXJzLnB1c2goLi4uYWxsQ3VzdG9tZXJzLm1hcCgoYykgPT4gYy50b0pTT04oKSkpO1xuICAgIH1cblxuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgY3VzdG9tZXJzLm1hcChhc3luYyAoY3VzdG9tZXI6IEN1c3RvbWVyLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldChcbiAgICAgICAgICBgJHtFbnYuZ2V0KFwiTVNfU0VDVVJJVFlcIil9L2FwaS91c2Vycy9lbWFpbC8ke2N1c3RvbWVyLmVtYWlsfWAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7RW52LmdldChcIk1TX1NFQ1VSSVRZX0tFWVwiKX1gLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgICBjb25zdCB7IF9pZCwgbmFtZSwgZW1haWwgfSA9IHJlcy5kYXRhO1xuICAgICAgICBjb25zdCB7IGlkLCBkb2N1bWVudCwgcGhvbmUsIGdlbmRlciB9ID0gY3VzdG9tZXI7XG4gICAgICAgIGN1c3RvbWVyc1tpbmRleF0gPSB7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgdXNlcl9pZDogX2lkLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgZW1haWwsXG4gICAgICAgICAgZG9jdW1lbnQsXG4gICAgICAgICAgcGhvbmUsXG4gICAgICAgICAgZ2VuZGVyLFxuICAgICAgICB9O1xuICAgICAgfSksXG4gICAgKTtcblxuICAgIGlmIChtZXRhQXV4Lmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB7IG1ldGE6IG1ldGFBdXgsIGRhdGE6IGN1c3RvbWVycyB9O1xuICAgIH1cblxuICAgIHJldHVybiBjdXN0b21lcnM7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0Q2hhdEJ5U2VydmljZUV4ZWN1dGlvbih7IHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgcmV0dXJuIEN1c3RvbWVyLmZpbmRPckZhaWwocGFyYW1zLmlkKS50aGVuKChjdXN0b21lcikgPT5cbiAgICAgIGN1c3RvbWVyXG4gICAgICAgIC5yZWxhdGVkKFwic2VydmljZUV4ZWN1dGlvbnNcIilcbiAgICAgICAgLnF1ZXJ5KClcbiAgICAgICAgLndoZXJlKFwiaWRcIiwgcGFyYW1zLnNlcnZpY2VfZXhlY3V0aW9uX2lkKVxuICAgICAgICAuZmlyc3QoKVxuICAgICAgICAudGhlbigoc2VydmljZUV4ZWN1dGlvbikgPT4gc2VydmljZUV4ZWN1dGlvbj8ucmVsYXRlZChcImNoYXRcIikpLFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgY3JlYXRlKHsgcmVxdWVzdCB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoQ3VzdG9tZXJWYWxpZGF0b3IpO1xuICAgIGNvbnN0IHRoZUN1c3RvbWVyOiBDdXN0b21lciA9IGF3YWl0IEN1c3RvbWVyLmNyZWF0ZShib2R5KTtcbiAgICByZXR1cm4gdGhlQ3VzdG9tZXI7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBkYXRlKHsgcGFyYW1zLCByZXF1ZXN0IH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCB0aGVDdXN0b21lcjogQ3VzdG9tZXIgPSBhd2FpdCBDdXN0b21lci5maW5kT3JGYWlsKHBhcmFtcy5pZCk7XG4gICAgY29uc3QgZGF0YSA9IHJlcXVlc3QuYm9keSgpO1xuICAgIHRoZUN1c3RvbWVyLm1lcmdlKGRhdGEpO1xuICAgIHJldHVybiBhd2FpdCB0aGVDdXN0b21lci5zYXZlKCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVsZXRlKHsgcGFyYW1zLCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgdGhlQ3VzdG9tZXI6IEN1c3RvbWVyID0gYXdhaXQgQ3VzdG9tZXIuZmluZE9yRmFpbChwYXJhbXMuaWQpO1xuICAgIHJlc3BvbnNlLnN0YXR1cygyMDQpO1xuICAgIHJldHVybiBhd2FpdCB0aGVDdXN0b21lci5kZWxldGUoKTtcbiAgfVxuXG4gIC8vIGdldCBhbGwgc3Vic2NyaXB0aW9ucyBieSBjdXN0b21lclxuICBwdWJsaWMgYXN5bmMgZ2V0U3Vic2NyaXB0aW9uQnlDdXN0b21lcih7IHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgdGhlQ3VzdG9tZXIgPSBhd2FpdCBDdXN0b21lci5maW5kT3JGYWlsKHBhcmFtcy5pZCk7XG4gICAgYXdhaXQgdGhlQ3VzdG9tZXIubG9hZChcInN1YnNjcmlwdGlvbnNcIik7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICB0aGVDdXN0b21lci5zdWJzY3JpcHRpb25zLm1hcChhc3luYyAocykgPT4ge1xuICAgICAgICBhd2FpdCBzLmxvYWQoXCJjdXN0b21lclwiKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogcy5pZCxcbiAgICAgICAgICBjdXN0b21lcjogcy5jdXN0b21lcl9pZCxcbiAgICAgICAgICBzdGFydF9kYXRlOiBzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICBlbmRfZGF0ZTogcy5lbmREYXRlLFxuICAgICAgICAgIG1vbnRobHlfZmVlOiBzLm1vbnRobHlGZWUsXG4gICAgICAgICAgaXNfcGFpZDogcy5pc1BhaWQsXG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICApO1xuICB9XG59XG4iXX0=