"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Comment_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Comment"));
const CommentValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/CommentValidator"));
class CommentsController {
    async find({ request, params }) {
        if (params.id) {
            let theComment = await Comment_1.default.findOrFail(params.id);
            return theComment;
        }
        else {
            const data = request.all();
            if ("page" in data && "per_page" in data) {
                const page = request.input('page', 1);
                const perPage = request.input("per_page", 20);
                return await Comment_1.default.query().paginate(page, perPage);
            }
            else {
                return await Comment_1.default.query();
            }
        }
    }
    async create({ request }) {
        const body = await request.validate(CommentValidator_1.default);
        const theComment = await Comment_1.default.create(body);
        return theComment;
    }
    async update({ params, request }) {
        const theComment = await Comment_1.default.findOrFail(params.id);
        const data = request.body();
        theComment.merge(data);
        return await theComment.save();
    }
    async delete({ params, response }) {
        const theComment = await Comment_1.default.findOrFail(params.id);
        response.status(204);
        return await theComment.delete();
    }
}
exports.default = CommentsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWVudHNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ29tbWVudHNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsdUZBQXlDO0FBQ3pDLDZHQUErRDtBQUUvRCxNQUFxQixrQkFBa0I7SUFFNUIsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQXVCO1FBQ3RELElBQUksTUFBTSxDQUFDLEVBQUUsRUFBRTtZQUNYLElBQUksVUFBVSxHQUFZLE1BQU0saUJBQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlELE9BQU8sVUFBVSxDQUFDO1NBQ3JCO2FBQU07WUFDSCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUE7WUFDMUIsSUFBSSxNQUFNLElBQUksSUFBSSxJQUFJLFVBQVUsSUFBSSxJQUFJLEVBQUU7Z0JBQ3RDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDOUMsT0FBTyxNQUFNLGlCQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTthQUN2RDtpQkFBTTtnQkFDSCxPQUFPLE1BQU0saUJBQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQTthQUMvQjtTQUVKO0lBRUwsQ0FBQztJQUNNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQXVCO1FBQ2hELE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQywwQkFBZ0IsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sVUFBVSxHQUFZLE1BQU0saUJBQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkQsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUF1QjtRQUN4RCxNQUFNLFVBQVUsR0FBWSxNQUFNLGlCQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDNUIsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixPQUFPLE1BQU0sVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBdUI7UUFDekQsTUFBTSxVQUFVLEdBQVksTUFBTSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQixPQUFPLE1BQU0sVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3JDLENBQUM7Q0FFSjtBQXRDRCxxQ0FzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IENvbW1lbnQgZnJvbSAnQXBwL01vZGVscy9Db21tZW50JztcbmltcG9ydCBDb21tZW50VmFsaWRhdG9yIGZyb20gJ0FwcC9WYWxpZGF0b3JzL0NvbW1lbnRWYWxpZGF0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tZW50c0NvbnRyb2xsZXIge1xuICAgIFxuICAgIHB1YmxpYyBhc3luYyBmaW5kKHsgcmVxdWVzdCwgcGFyYW1zIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5pZCkge1xuICAgICAgICAgICAgbGV0IHRoZUNvbW1lbnQ6IENvbW1lbnQgPSBhd2FpdCBDb21tZW50LmZpbmRPckZhaWwocGFyYW1zLmlkKTtcbiAgICAgICAgICAgIHJldHVybiB0aGVDb21tZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlcXVlc3QuYWxsKClcbiAgICAgICAgICAgIGlmIChcInBhZ2VcIiBpbiBkYXRhICYmIFwicGVyX3BhZ2VcIiBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZSA9IHJlcXVlc3QuaW5wdXQoJ3BhZ2UnLCAxKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwZXJQYWdlID0gcmVxdWVzdC5pbnB1dChcInBlcl9wYWdlXCIsIDIwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgQ29tbWVudC5xdWVyeSgpLnBhZ2luYXRlKHBhZ2UsIHBlclBhZ2UpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBDb21tZW50LnF1ZXJ5KClcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9XG4gICAgcHVibGljIGFzeW5jIGNyZWF0ZSh7IHJlcXVlc3QgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgICAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC52YWxpZGF0ZShDb21tZW50VmFsaWRhdG9yKTtcbiAgICAgICAgY29uc3QgdGhlQ29tbWVudDogQ29tbWVudCA9IGF3YWl0IENvbW1lbnQuY3JlYXRlKGJvZHkpO1xuICAgICAgICByZXR1cm4gdGhlQ29tbWVudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdXBkYXRlKHsgcGFyYW1zLCByZXF1ZXN0IH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgICAgY29uc3QgdGhlQ29tbWVudDogQ29tbWVudCA9IGF3YWl0IENvbW1lbnQuZmluZE9yRmFpbChwYXJhbXMuaWQpO1xuICAgICAgICBjb25zdCBkYXRhID0gcmVxdWVzdC5ib2R5KCk7XG4gICAgICAgIHRoZUNvbW1lbnQubWVyZ2UoZGF0YSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGVDb21tZW50LnNhdmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZGVsZXRlKHsgcGFyYW1zLCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIGNvbnN0IHRoZUNvbW1lbnQ6IENvbW1lbnQgPSBhd2FpdCBDb21tZW50LmZpbmRPckZhaWwocGFyYW1zLmlkKTtcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzKDIwNCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGVDb21tZW50LmRlbGV0ZSgpO1xuICAgIH1cblxufSJdfQ==