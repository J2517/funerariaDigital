"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Service_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Service"));
class ServicesController {
    async find({ request, params }) {
        if (params.id) {
            let theService = await Service_1.default.findOrFail(params.id);
            return theService;
        }
        else {
            const data = request.all();
            if ("page" in data && "per_page" in data) {
                const page = request.input('page', 1);
                const perPage = request.input("per_page", 20);
                return await Service_1.default.query().paginate(page, perPage);
            }
            else {
                return await Service_1.default.query();
            }
        }
    }
    async create({ request }) {
        const body = request.body();
        const theService = await Service_1.default.create(body);
        return theService;
    }
    async update({ params, request }) {
        const theService = await Service_1.default.findOrFail(params.id);
        const data = request.body();
        theService.merge(data);
        return await theService.save();
    }
    async delete({ params, response }) {
        const theService = await Service_1.default.findOrFail(params.id);
        response.status(204);
        return await theService.delete();
    }
}
exports.default = ServicesController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmljZXNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2VydmljZXNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsdUZBQXlDO0FBRXpDLE1BQXFCLGtCQUFrQjtJQUM5QixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBdUI7UUFDeEQsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQ1gsSUFBSSxVQUFVLEdBQVksTUFBTSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUQsT0FBTyxVQUFVLENBQUM7U0FDckI7YUFBTTtZQUNILE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUMxQixJQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksVUFBVSxJQUFJLElBQUksRUFBRTtnQkFDdEMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUM5QyxPQUFPLE1BQU0saUJBQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO2FBQ3ZEO2lCQUFNO2dCQUNILE9BQU8sTUFBTSxpQkFBTyxDQUFDLEtBQUssRUFBRSxDQUFBO2FBQy9CO1NBRUo7SUFFSCxDQUFDO0lBQ00sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBdUI7UUFDaEQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzVCLE1BQU0sVUFBVSxHQUFZLE1BQU0saUJBQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkQsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUF1QjtRQUN4RCxNQUFNLFVBQVUsR0FBWSxNQUFNLGlCQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDNUIsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixPQUFPLE1BQU0sVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBdUI7UUFDekQsTUFBTSxVQUFVLEdBQVksTUFBTSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQixPQUFPLE1BQU0sVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3JDLENBQUM7Q0FDRjtBQXBDRCxxQ0FvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tIFwiQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dFwiO1xuaW1wb3J0IFNlcnZpY2UgZnJvbSBcIkFwcC9Nb2RlbHMvU2VydmljZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJ2aWNlc0NvbnRyb2xsZXIge1xuICBwdWJsaWMgYXN5bmMgZmluZCh7IHJlcXVlc3QsIHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgaWYgKHBhcmFtcy5pZCkge1xuICAgICAgICBsZXQgdGhlU2VydmljZTogU2VydmljZSA9IGF3YWl0IFNlcnZpY2UuZmluZE9yRmFpbChwYXJhbXMuaWQpO1xuICAgICAgICByZXR1cm4gdGhlU2VydmljZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBkYXRhID0gcmVxdWVzdC5hbGwoKVxuICAgICAgICBpZiAoXCJwYWdlXCIgaW4gZGF0YSAmJiBcInBlcl9wYWdlXCIgaW4gZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgcGFnZSA9IHJlcXVlc3QuaW5wdXQoJ3BhZ2UnLCAxKTtcbiAgICAgICAgICAgIGNvbnN0IHBlclBhZ2UgPSByZXF1ZXN0LmlucHV0KFwicGVyX3BhZ2VcIiwgMjApO1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IFNlcnZpY2UucXVlcnkoKS5wYWdpbmF0ZShwYWdlLCBwZXJQYWdlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IFNlcnZpY2UucXVlcnkoKVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgfVxuICBwdWJsaWMgYXN5bmMgY3JlYXRlKHsgcmVxdWVzdCB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICBjb25zdCBib2R5ID0gcmVxdWVzdC5ib2R5KCk7XG4gICAgICBjb25zdCB0aGVTZXJ2aWNlOiBTZXJ2aWNlID0gYXdhaXQgU2VydmljZS5jcmVhdGUoYm9keSk7XG4gICAgICByZXR1cm4gdGhlU2VydmljZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB1cGRhdGUoeyBwYXJhbXMsIHJlcXVlc3QgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgICAgY29uc3QgdGhlU2VydmljZTogU2VydmljZSA9IGF3YWl0IFNlcnZpY2UuZmluZE9yRmFpbChwYXJhbXMuaWQpO1xuICAgICAgY29uc3QgZGF0YSA9IHJlcXVlc3QuYm9keSgpO1xuICAgICAgdGhlU2VydmljZS5tZXJnZShkYXRhKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGVTZXJ2aWNlLnNhdmUoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZWxldGUoeyBwYXJhbXMsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgIGNvbnN0IHRoZVNlcnZpY2U6IFNlcnZpY2UgPSBhd2FpdCBTZXJ2aWNlLmZpbmRPckZhaWwocGFyYW1zLmlkKTtcbiAgICAgIHJlc3BvbnNlLnN0YXR1cygyMDQpO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoZVNlcnZpY2UuZGVsZXRlKCk7XG4gIH1cbn1cbiJdfQ==