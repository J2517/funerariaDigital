"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Administrator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Administrator"));
const axios_1 = __importDefault(require("axios"));
const Env_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Env"));
const AdministratorValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/AdministratorValidator"));
class AdministratorsController {
    async find({ request, params }) {
        const administrators = [];
        const { page, per_page } = request.only(["page", "per_page"]);
        const metaAux = [];
        if (params.id) {
            const theAdministrator = await Administrator_1.default.findOrFail(params.id);
            administrators.push(theAdministrator);
        }
        else if (page && per_page) {
            const { meta, data } = await Administrator_1.default.query()
                .paginate(page, per_page)
                .then((res) => res.toJSON());
            metaAux.push(meta);
            administrators.push(...data);
        }
        else {
            const allAdministrators = await Administrator_1.default.all();
            administrators.push(...allAdministrators.map((c) => c.toJSON()));
        }
        await Promise.all(administrators.map(async (Administrator, index) => {
            const res = await axios_1.default.get(`${Env_1.default.get("MS_SECURITY")}/api/users/email/${Administrator.email}`, {
                headers: {
                    Authorization: `Bearer ${Env_1.default.get("MS_SECURITY_KEY")}`,
                },
            });
            const { _id, name, email } = res.data;
            administrators[index] = {
                id: Administrator.id,
                user_id: _id,
                name,
                email,
            };
        }));
        if (metaAux.length > 0) {
            return { meta: metaAux, data: administrators };
        }
        return administrators;
    }
    async create({ request }) {
        const body = await request.validate(AdministratorValidator_1.default);
        const theAdministrator = await Administrator_1.default.create(body);
        return theAdministrator;
    }
    async update({ params, request }) {
        const theAdministrator = await Administrator_1.default.findOrFail(params.id);
        const data = request.body();
        theAdministrator.merge(data);
        return await theAdministrator.save();
    }
    async delete({ params, response }) {
        const theAdministrator = await Administrator_1.default.findOrFail(params.id);
        response.status(204);
        return await theAdministrator.delete();
    }
}
exports.default = AdministratorsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWRtaW5pc3RyYXRvcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQWRtaW5pc3RyYXRvcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsbUdBQXFEO0FBRXJELGtEQUEwQjtBQUUxQixnRkFBdUM7QUFDdkMseUhBQTJFO0FBRTNFLE1BQXFCLHdCQUF3QjtJQUNwQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBdUI7UUFDeEQsTUFBTSxjQUFjLEdBQWtCLEVBQUUsQ0FBQztRQUN6QyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUM5RCxNQUFNLE9BQU8sR0FBa0IsRUFBRSxDQUFDO1FBRWxDLElBQUksTUFBTSxDQUFDLEVBQUUsRUFBRTtZQUNiLE1BQU0sZ0JBQWdCLEdBQWtCLE1BQU0sdUJBQWEsQ0FBQyxVQUFVLENBQ3BFLE1BQU0sQ0FBQyxFQUFFLENBQ1YsQ0FBQztZQUNGLGNBQWMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUN2QzthQUFNLElBQUksSUFBSSxJQUFJLFFBQVEsRUFBRTtZQUMzQixNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sdUJBQWEsQ0FBQyxLQUFLLEVBQUU7aUJBQy9DLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2lCQUN4QixJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBRS9CLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkIsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQzlCO2FBQU07WUFDTCxNQUFNLGlCQUFpQixHQUFHLE1BQU0sdUJBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNwRCxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNmLGNBQWMsQ0FBQyxHQUFHLENBQ2hCLEtBQUssRUFBRSxhQUE0QixFQUFFLEtBQWEsRUFBRSxFQUFFO1lBQ3BELE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBSyxDQUFDLEdBQUcsQ0FDekIsR0FBRyxhQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsYUFBYSxDQUFDLEtBQUssRUFBRSxFQUNsRTtnQkFDRSxPQUFPLEVBQUU7b0JBQ1AsYUFBYSxFQUFFLFVBQVUsYUFBRyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO2lCQUN0RDthQUNGLENBQ0YsQ0FBQztZQUNGLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDdEMsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHO2dCQUN0QixFQUFFLEVBQUUsYUFBYSxDQUFDLEVBQUU7Z0JBQ3BCLE9BQU8sRUFBRSxHQUFHO2dCQUNaLElBQUk7Z0JBQ0osS0FBSzthQUNOLENBQUM7UUFDSixDQUFDLENBQ0YsQ0FDRixDQUFDO1FBRUYsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN0QixPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLENBQUM7U0FDaEQ7UUFFRCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBdUI7UUFDbEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLGdDQUFzQixDQUFDLENBQUM7UUFDNUQsTUFBTSxnQkFBZ0IsR0FBa0IsTUFBTSx1QkFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6RSxPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBdUI7UUFDMUQsTUFBTSxnQkFBZ0IsR0FBa0IsTUFBTSx1QkFBYSxDQUFDLFVBQVUsQ0FDcEUsTUFBTSxDQUFDLEVBQUUsQ0FDVixDQUFDO1FBQ0YsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzVCLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixPQUFPLE1BQU0sZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUF1QjtRQUMzRCxNQUFNLGdCQUFnQixHQUFrQixNQUFNLHVCQUFhLENBQUMsVUFBVSxDQUNwRSxNQUFNLENBQUMsRUFBRSxDQUNWLENBQUM7UUFDRixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sTUFBTSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0NBQ0Y7QUExRUQsMkNBMEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSBcIkBpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHRcIjtcbmltcG9ydCB7IE1vZGVsT2JqZWN0IH0gZnJvbSBcIkBpb2M6QWRvbmlzL0x1Y2lkL09ybVwiO1xuaW1wb3J0IEFkbWluaXN0cmF0b3IgZnJvbSBcIkFwcC9Nb2RlbHMvQWRtaW5pc3RyYXRvclwiO1xuXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbmltcG9ydCBFbnYgZnJvbSBcIkBpb2M6QWRvbmlzL0NvcmUvRW52XCI7XG5pbXBvcnQgQWRtaW5pc3RyYXRvclZhbGlkYXRvciBmcm9tIFwiQXBwL1ZhbGlkYXRvcnMvQWRtaW5pc3RyYXRvclZhbGlkYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBZG1pbmlzdHJhdG9yc0NvbnRyb2xsZXIge1xuICBwdWJsaWMgYXN5bmMgZmluZCh7IHJlcXVlc3QsIHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgYWRtaW5pc3RyYXRvcnM6IE1vZGVsT2JqZWN0W10gPSBbXTtcbiAgICBjb25zdCB7IHBhZ2UsIHBlcl9wYWdlIH0gPSByZXF1ZXN0Lm9ubHkoW1wicGFnZVwiLCBcInBlcl9wYWdlXCJdKTtcbiAgICBjb25zdCBtZXRhQXV4OiBNb2RlbE9iamVjdFtdID0gW107XG5cbiAgICBpZiAocGFyYW1zLmlkKSB7XG4gICAgICBjb25zdCB0aGVBZG1pbmlzdHJhdG9yOiBBZG1pbmlzdHJhdG9yID0gYXdhaXQgQWRtaW5pc3RyYXRvci5maW5kT3JGYWlsKFxuICAgICAgICBwYXJhbXMuaWQsXG4gICAgICApO1xuICAgICAgYWRtaW5pc3RyYXRvcnMucHVzaCh0aGVBZG1pbmlzdHJhdG9yKTtcbiAgICB9IGVsc2UgaWYgKHBhZ2UgJiYgcGVyX3BhZ2UpIHtcbiAgICAgIGNvbnN0IHsgbWV0YSwgZGF0YSB9ID0gYXdhaXQgQWRtaW5pc3RyYXRvci5xdWVyeSgpXG4gICAgICAgIC5wYWdpbmF0ZShwYWdlLCBwZXJfcGFnZSlcbiAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLnRvSlNPTigpKTtcblxuICAgICAgbWV0YUF1eC5wdXNoKG1ldGEpO1xuICAgICAgYWRtaW5pc3RyYXRvcnMucHVzaCguLi5kYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYWxsQWRtaW5pc3RyYXRvcnMgPSBhd2FpdCBBZG1pbmlzdHJhdG9yLmFsbCgpO1xuICAgICAgYWRtaW5pc3RyYXRvcnMucHVzaCguLi5hbGxBZG1pbmlzdHJhdG9ycy5tYXAoKGMpID0+IGMudG9KU09OKCkpKTtcbiAgICB9XG5cbiAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIGFkbWluaXN0cmF0b3JzLm1hcChcbiAgICAgICAgYXN5bmMgKEFkbWluaXN0cmF0b3I6IEFkbWluaXN0cmF0b3IsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQoXG4gICAgICAgICAgICBgJHtFbnYuZ2V0KFwiTVNfU0VDVVJJVFlcIil9L2FwaS91c2Vycy9lbWFpbC8ke0FkbWluaXN0cmF0b3IuZW1haWx9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtFbnYuZ2V0KFwiTVNfU0VDVVJJVFlfS0VZXCIpfWAsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgeyBfaWQsIG5hbWUsIGVtYWlsIH0gPSByZXMuZGF0YTtcbiAgICAgICAgICBhZG1pbmlzdHJhdG9yc1tpbmRleF0gPSB7XG4gICAgICAgICAgICBpZDogQWRtaW5pc3RyYXRvci5pZCxcbiAgICAgICAgICAgIHVzZXJfaWQ6IF9pZCxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgKSxcbiAgICApO1xuXG4gICAgaWYgKG1ldGFBdXgubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHsgbWV0YTogbWV0YUF1eCwgZGF0YTogYWRtaW5pc3RyYXRvcnMgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRtaW5pc3RyYXRvcnM7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgY3JlYXRlKHsgcmVxdWVzdCB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoQWRtaW5pc3RyYXRvclZhbGlkYXRvcik7XG4gICAgY29uc3QgdGhlQWRtaW5pc3RyYXRvcjogQWRtaW5pc3RyYXRvciA9IGF3YWl0IEFkbWluaXN0cmF0b3IuY3JlYXRlKGJvZHkpO1xuICAgIHJldHVybiB0aGVBZG1pbmlzdHJhdG9yO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZSh7IHBhcmFtcywgcmVxdWVzdCB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgdGhlQWRtaW5pc3RyYXRvcjogQWRtaW5pc3RyYXRvciA9IGF3YWl0IEFkbWluaXN0cmF0b3IuZmluZE9yRmFpbChcbiAgICAgIHBhcmFtcy5pZCxcbiAgICApO1xuICAgIGNvbnN0IGRhdGEgPSByZXF1ZXN0LmJvZHkoKTtcbiAgICB0aGVBZG1pbmlzdHJhdG9yLm1lcmdlKGRhdGEpO1xuICAgIHJldHVybiBhd2FpdCB0aGVBZG1pbmlzdHJhdG9yLnNhdmUoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZWxldGUoeyBwYXJhbXMsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCB0aGVBZG1pbmlzdHJhdG9yOiBBZG1pbmlzdHJhdG9yID0gYXdhaXQgQWRtaW5pc3RyYXRvci5maW5kT3JGYWlsKFxuICAgICAgcGFyYW1zLmlkLFxuICAgICk7XG4gICAgcmVzcG9uc2Uuc3RhdHVzKDIwNCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoZUFkbWluaXN0cmF0b3IuZGVsZXRlKCk7XG4gIH1cbn1cbiJdfQ==