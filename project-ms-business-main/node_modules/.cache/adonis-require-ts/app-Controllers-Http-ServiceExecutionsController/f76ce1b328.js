"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceExecution_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/ServiceExecution"));
class ServiceExecutionsController {
    async find({ request, params }) {
        if (params.id) {
            let theServiceExecution = await ServiceExecution_1.default.findOrFail(params.id);
            return theServiceExecution;
        }
        else {
            const data = request.all();
            if ("page" in data && "per_page" in data) {
                const page = request.input("page", 1);
                const perPage = request.input("per_page", 20);
                return await ServiceExecution_1.default.query().paginate(page, perPage);
            }
            else {
                return await ServiceExecution_1.default.query();
            }
        }
    }
    async create({ request }) {
        const body = request.body();
        const theServiceExecution = await ServiceExecution_1.default.create(body);
        return theServiceExecution;
    }
    async update({ params, request }) {
        const theServiceExecution = await ServiceExecution_1.default.findOrFail(params.id);
        const data = request.body();
        theServiceExecution.merge(data);
        return await theServiceExecution.save();
    }
    async delete({ params, response }) {
        const theServiceExecution = await ServiceExecution_1.default.findOrFail(params.id);
        response.status(204);
        return await theServiceExecution.delete();
    }
}
exports.default = ServiceExecutionsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmljZUV4ZWN1dGlvbnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2VydmljZUV4ZWN1dGlvbnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EseUdBQTJEO0FBRTNELE1BQXFCLDJCQUEyQjtJQUN2QyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBdUI7UUFDeEQsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQ2IsSUFBSSxtQkFBbUIsR0FDckIsTUFBTSwwQkFBZ0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLE9BQU8sbUJBQW1CLENBQUM7U0FDNUI7YUFBTTtZQUNMLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUMzQixJQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksVUFBVSxJQUFJLElBQUksRUFBRTtnQkFDeEMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUM5QyxPQUFPLE1BQU0sMEJBQWdCLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQzthQUMvRDtpQkFBTTtnQkFDTCxPQUFPLE1BQU0sMEJBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDdkM7U0FDRjtJQUNILENBQUM7SUFDTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxFQUF1QjtRQUNsRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDNUIsTUFBTSxtQkFBbUIsR0FDdkIsTUFBTSwwQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsT0FBTyxtQkFBbUIsQ0FBQztJQUM3QixDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQXVCO1FBQzFELE1BQU0sbUJBQW1CLEdBQ3ZCLE1BQU0sMEJBQWdCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDNUIsbUJBQW1CLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sTUFBTSxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQXVCO1FBQzNELE1BQU0sbUJBQW1CLEdBQ3ZCLE1BQU0sMEJBQWdCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sTUFBTSxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0NBQ0Y7QUF0Q0QsOENBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSBcIkBpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHRcIjtcbmltcG9ydCBTZXJ2aWNlRXhlY3V0aW9uIGZyb20gXCJBcHAvTW9kZWxzL1NlcnZpY2VFeGVjdXRpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VydmljZUV4ZWN1dGlvbnNDb250cm9sbGVyIHtcbiAgcHVibGljIGFzeW5jIGZpbmQoeyByZXF1ZXN0LCBwYXJhbXMgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGlmIChwYXJhbXMuaWQpIHtcbiAgICAgIGxldCB0aGVTZXJ2aWNlRXhlY3V0aW9uOiBTZXJ2aWNlRXhlY3V0aW9uID1cbiAgICAgICAgYXdhaXQgU2VydmljZUV4ZWN1dGlvbi5maW5kT3JGYWlsKHBhcmFtcy5pZCk7XG4gICAgICByZXR1cm4gdGhlU2VydmljZUV4ZWN1dGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGF0YSA9IHJlcXVlc3QuYWxsKCk7XG4gICAgICBpZiAoXCJwYWdlXCIgaW4gZGF0YSAmJiBcInBlcl9wYWdlXCIgaW4gZGF0YSkge1xuICAgICAgICBjb25zdCBwYWdlID0gcmVxdWVzdC5pbnB1dChcInBhZ2VcIiwgMSk7XG4gICAgICAgIGNvbnN0IHBlclBhZ2UgPSByZXF1ZXN0LmlucHV0KFwicGVyX3BhZ2VcIiwgMjApO1xuICAgICAgICByZXR1cm4gYXdhaXQgU2VydmljZUV4ZWN1dGlvbi5xdWVyeSgpLnBhZ2luYXRlKHBhZ2UsIHBlclBhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IFNlcnZpY2VFeGVjdXRpb24ucXVlcnkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHVibGljIGFzeW5jIGNyZWF0ZSh7IHJlcXVlc3QgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IGJvZHkgPSByZXF1ZXN0LmJvZHkoKTtcbiAgICBjb25zdCB0aGVTZXJ2aWNlRXhlY3V0aW9uOiBTZXJ2aWNlRXhlY3V0aW9uID1cbiAgICAgIGF3YWl0IFNlcnZpY2VFeGVjdXRpb24uY3JlYXRlKGJvZHkpO1xuICAgIHJldHVybiB0aGVTZXJ2aWNlRXhlY3V0aW9uO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZSh7IHBhcmFtcywgcmVxdWVzdCB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgdGhlU2VydmljZUV4ZWN1dGlvbjogU2VydmljZUV4ZWN1dGlvbiA9XG4gICAgICBhd2FpdCBTZXJ2aWNlRXhlY3V0aW9uLmZpbmRPckZhaWwocGFyYW1zLmlkKTtcbiAgICBjb25zdCBkYXRhID0gcmVxdWVzdC5ib2R5KCk7XG4gICAgdGhlU2VydmljZUV4ZWN1dGlvbi5tZXJnZShkYXRhKTtcbiAgICByZXR1cm4gYXdhaXQgdGhlU2VydmljZUV4ZWN1dGlvbi5zYXZlKCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVsZXRlKHsgcGFyYW1zLCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgdGhlU2VydmljZUV4ZWN1dGlvbjogU2VydmljZUV4ZWN1dGlvbiA9XG4gICAgICBhd2FpdCBTZXJ2aWNlRXhlY3V0aW9uLmZpbmRPckZhaWwocGFyYW1zLmlkKTtcbiAgICByZXNwb25zZS5zdGF0dXMoMjA0KTtcbiAgICByZXR1cm4gYXdhaXQgdGhlU2VydmljZUV4ZWN1dGlvbi5kZWxldGUoKTtcbiAgfVxufVxuIl19